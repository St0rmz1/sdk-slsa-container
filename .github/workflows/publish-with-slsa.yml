# workflows/publish-with-slsa.yml
name: 'Publish with SLSA'
on:
# Purposely changed to dispatch for testing
  workflow_dispatch:
#  push:
#    tags:
#    - 'slsa-v[0-9]+.[0-9]+.[0-9]+'
   # - 'slsa-v[0-9]+.[0-9]+.[0-9]+\-beta'
   # - 'slsa-v[0-9]+.[0-9]+.[0-9]+\-beta\.[0-9]+'
   # - 'slsa-v[0-9]+.[0-9]+.[0-9]+\-alpha'
   # - 'slsa-v[0-9]+.[0-9]+.[0-9]+\-alpha\.[0-9]+'
#
# Remove PACT for testing
#
# env:
#  PACT_VERSION: ${{ github.ref_name }}
#  PACT_BROKER_BASE_URL: ${{ vars.PACT_BROKER_BASE_URL }}
#  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

jobs:
  get-tags:
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.get-tags.outputs.tag }}
      previous-tag: ${{ steps.get-tags.outputs.previous-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get tags
        id: get-tags
        uses: actions/github-script@v7
        with:
          script: |
            const {
              data: [latest, previous],
            } = await github.rest.repos.listTags({
              ...context.repo,
              per_page: 2,
              page: 1,
            });
            core.setOutput("tag", latest.name.replace(/^v/, ''));
            core.setOutput("previous-tag", previous.name.replace(/^v/, ''));

  #
  # Remove Generate Release Notes for Testing
  #
  # generate-release-notes-pr:
  #  runs-on: ubuntu-22.04
  #  needs: [get-tags]
  #  if: github.ref_type != 'branch'
  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v4
  #
  #  - name: Generate Release Notes PR
  #    env:
  #      GIT_PREV_TAG: ${{ needs.get-tags.outputs.previous-tag }}
  #      GIT_TAG: ${{ needs.get-tags.outputs.tag }}
  #      GH_PAT: ${{ secrets.GH_PAT }}
  #    run: |
  #      curl -H "Authorization: token $GH_PAT" \
  #        -H 'Accept: application/json' \
  #        -d "{\"event_type\": \"replicated-sdk-release-notes\", \"client_payload\": {\"version\": \"${GIT_TAG}\", \"prev_version\": \"${GIT_PREV_TAG}\" }}" \
  #        "https://api.github.com/repos/replicatedhq/replicated-docs/dispatches"

  #
  # Remove Tests
  #
  # make-tests:
  #  runs-on: ubuntu-22.04
  #  steps:
  #    - uses: actions/checkout@v4
  #    - uses: actions/setup-go@v5
  #      with:
  #        go-version: '^1.21'
  #    - uses: replicatedhq/action-install-pact@v1
  #    - run: make test
  #    - run: make publish-pact

  make-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.21'
      - run: make build
      - run: gh release create ${{ github.ref_name }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package-and-publish:
    runs-on: 'ubuntu-22.04'
    outputs:
       image_digest_apko: ${{ steps.build-push-action.outputs.digest }}
    needs:
      - get-tags
   #   - make-tests
      - make-build
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    #
    # Remove Pact tests
    #
    # - uses: replicatedhq/action-install-pact@v1

    # - name: Pact can-i-deploy
    #  run: |
    #    make can-i-deploy || echo "::warning:: can-i-deploy says no; provider(s) must successfully verify before release"

    - uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    #
    # Build and push the image using Chainguard apko and melange actions
    #
    - uses: ./.github/actions/build-push-action
      id: build-push-action
      with:
        context: deploy
        image-name: index.docker.io/st0rmz1/replicated-sdk:v${{needs.get-tags.outputs.tag}}
        git-tag: v${{needs.get-tags.outputs.tag}}
        registry-username: ${{ secrets.DOCKERHUB_USER }}
        registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}

  # #################################################################
  # This is where we propose calling the SLSA generator
  #
  # See https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md
  #
  # Successfull completion will 
  #  1. Create the image and SBOM and upload to dockerhub using the build-push-action above
  #  2. generate a SLSA attestations for the image and push it to the registry using the slsa-github-generator
  # ################################################################
  provenance:
    needs:
      - package-and-publish
      - get-tags
    permissions:
      actions: read
      id-token: write
      packages: write
    if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
    with:
      image: index.docker.io/st0rmz1/replicated-sdk:v${{needs.get-tags.outputs.tag}}
      digest: ${{ needs.package-and-publish.outputs.image_digest_apko }}
      registry-username: ${{ secrets.DOCKERHUB_USER }}
    secrets:
      registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    

    #
    # Don't need this as we don't publish the chart for this test
    #
    # - name: Run Package and Publish
    #  env: 
    #    REPLICATED_TAG: slsa-v${{needs.get-tags.outputs.tag}}
    #    REPLICATED_REGISTRY: st0rmz1 # docker.io/replicated
    #    REPLICATED_CHART_NAME: replicated
    #    REPLICATED_CHART_VERSION: ${{needs.get-tags.outputs.tag}}
    #    REPLICATED_USER_STAGING: ${{secrets.REPLICATED_USER_STAGING}}
    #    REPLICATED_PASS_STAGING: ${{secrets.REPLICATED_PASS_STAGING}}
    #    REPLICATED_USER_PROD: ${{secrets.REPLICATED_USER_PROD}}
    #    REPLICATED_PASS_PROD: ${{secrets.REPLICATED_PASS_PROD}}
      
      #
      #
      #
      #run: |
      #  # TEMPORARY: for backwards compatibility, create another directory to use for the "replicated-sdk" chart
      #  cp -R chart chart-sdk
      #
      #  cd chart
      #  envsubst < Chart.yaml.tmpl > Chart.yaml
      #  envsubst < values.yaml.tmpl > values.yaml
      #  rm -f *.tmpl
      #
      #  export CHART_NAME=`helm package . | rev | cut -d/ -f1 | rev`
      #
        # echo pushing ${CHART_NAME} to staging
        # helm registry login registry.staging.replicated.com --username $REPLICATED_USER_STAGING --password $REPLICATED_PASS_STAGING
        # helm push $CHART_NAME oci://registry.staging.replicated.com/library

        # echo pushing ${CHART_NAME} to production
        # helm registry login registry.replicated.com --username $REPLICATED_USER_PROD --password $REPLICATED_PASS_PROD
        # helm push $CHART_NAME oci://registry.replicated.com/library

        # TEMPORARY: for backwards compatibility, package and push chart with "replicated-sdk" name
        # cd ../chart-sdk
        # REPLICATED_CHART_NAME=replicated-sdk
        # envsubst < Chart.yaml.tmpl > Chart.yaml
        # envsubst < values.yaml.tmpl > values.yaml
        # rm -f *.tmpl

        # export CHART_NAME=`helm package . | rev | cut -d/ -f1 | rev`

        # echo pushing ${CHART_NAME} to staging
        # helm push $CHART_NAME oci://registry.staging.replicated.com/library

        # echo pushing ${CHART_NAME} to production
        # helm push $CHART_NAME oci://registry.replicated.com/library
 #
 #
 #
 #   - name: Pact record-release
 #     run: make record-release

